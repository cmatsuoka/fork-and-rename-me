From 25683efaf44ff7b040e6dd8368ced306d12d3e8b Mon Sep 17 00:00:00 2001
From: David Griffith <dave@661.org>
Date: Fri, 28 Apr 2017 11:47:05 -0700
Subject: [PATCH 36/68] Use correct tick definition of the system instead of a
 hard-defined value.

This is from xv-20091215-werner-fink-multiple-fixes.patch.mime.
CLK_TCK isn't defined anymore on newer Linux systems as it now becomes
variable at boot time.  I need to revisit this after this patch-a-thon
to make sure that if CLK_TCK is indeed defined, then we should use that
so as to keep backwards compatibility.
---
 xvevent.c | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/xvevent.c b/xvevent.c
index b9964df..bdbcf3c 100644
--- a/xvevent.c
+++ b/xvevent.c
@@ -89,6 +89,7 @@ int EventLoop()
 #ifdef USE_TICKS
   clock_t waitsec_ticks=0L, orgtime_ticks=0L, curtime_ticks;
   clock_t elapsed_ticks=0L, remaining_interval;
+  clock_t clock_ticks = sysconf(_SC_CLK_TCK);
 #else
   time_t orgtime=0L, curtime;
 #endif
@@ -135,7 +136,7 @@ int EventLoop()
 	 all pending events (ie, drawing the image the first time)
 	 have been dealt with:  START WAITING */
 #ifdef USE_TICKS
-      waitsec_ticks = (clock_t)(waitsec * CLK_TCK);
+      waitsec_ticks = (clock_t)(waitsec * clock_ticks);
       orgtime_ticks = times(NULL);  /* unclear if NULL valid, but OK on Linux */
 #else
       orgtime = time(NULL);
@@ -181,11 +182,11 @@ int EventLoop()
         } else
           elapsed_ticks = curtime_ticks - orgtime_ticks;
         remaining_interval = waitsec_ticks - elapsed_ticks;
-        if (remaining_interval >= (clock_t)(1 * CLK_TCK))
+        if (remaining_interval >= (clock_t)(1 * clock_ticks))
           sleep(1);
         else {
           /* less than one second remaining:  do delay in msec, then return */
-          Timer((remaining_interval * 1000L) / CLK_TCK);  /* can't overflow */
+          Timer((remaining_interval * 1000L) / clock_ticks);  /* can't overflow */
           return waitloop? NEXTLOOP : NEXTQUIT;
         }
 #else
-- 
2.17.1

